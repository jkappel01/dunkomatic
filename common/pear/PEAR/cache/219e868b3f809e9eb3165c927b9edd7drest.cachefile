a:8:{s:7:"attribs";a:4:{s:5:"xmlns";s:36:"http://pear.php.net/dtd/rest.package";s:9:"xmlns:xsi";s:41:"http://www.w3.org/2001/XMLSchema-instance";s:11:"xmlns:xlink";s:28:"http://www.w3.org/1999/xlink";s:18:"xsi:schemaLocation";s:80:"http://pear.php.net/dtd/rest.package    http://pear.php.net/dtd/rest.package.xsd";}s:1:"n";s:18:"PHP_LexerGenerator";s:1:"c";s:12:"pear.php.net";s:2:"ca";a:2:{s:7:"attribs";a:1:{s:10:"xlink:href";s:11:"/rest/c/PHP";}s:8:"_content";s:3:"PHP";}s:1:"l";s:15:"New BSD License";s:1:"s";s:58:"translate lexer files in lex2php format into a PHP 5 lexer";s:1:"d";s:681:"Translate a lexer file with a format similar to re2c (http://re2c.org)
  into a PHP 5 lexer for use with a parser.
  
  Unlike re2c (as of re2c version 0.11), generated lexers are state-aware
  out of the box.
  
  Generated lexers are very efficient, more than twice as efficient as other
  alternatives like csLex (written in C#) because they utilize PHP's
  built-in Perl-compatible regular expressions to lex for tokens.

  Now in version 0.3.0+, with processing instruction %longestmatch, generated
  lexers will always pick the longest string to match, rather than the first.
  Generated lexers are slightly slower, but match behavior of legacy lexers like
  flex, lex, re2c.";s:1:"r";a:1:{s:7:"attribs";a:1:{s:10:"xlink:href";s:26:"/rest/r/php_lexergenerator";}}}